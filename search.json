[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fundamentals of Linear Models 2025-2026: Workbook",
    "section": "",
    "text": "Welcome\nThis is the Workbook for the Fundamentals of Linear Models Course\nThis Workbook was designed as a companion to the Workgroup lectures and aims to provide you with basics of statistical computing using the R language programming, an explanation of the exercises we will follow during the class as well as the assignments to be performed after the lecture.\nAnswers to the exercises will be included in the relevant Workgroup section after the due date of each of the assignments.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "What would you learn in this course\nThis is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#workbook-organization",
    "href": "intro.html#workbook-organization",
    "title": "Introduction",
    "section": "Workbook organization",
    "text": "Workbook organization",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#references-for-self-study",
    "href": "intro.html#references-for-self-study",
    "title": "Introduction",
    "section": "References for self study",
    "text": "References for self study\n\nRead Chapter 1, Introduction to R, from Bodo Winter‚Äôs book.\nIf you have never used R or any other programming language, read the following online basic tutorial, sections 2 to 8by UMC Utrecht: http://r-tutorial.nl/\nWatch the following YouTube Videos on data frames by DataCamp: https://www.youtube.com/watch?v=9f2g7RN5N0I https://youtu.be/Nh6tSD4i4qs?feature=shared\nLook at examples of dataframes usage in: https://bookdown.org/dli/rguide/working-with-data-frames.html\n\n\n\n\n\nKnuth, Donald E. 1984. ‚ÄúLiterate Programming.‚Äù Comput. J. 27 (2): 97‚Äì111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "Workgroup1.html",
    "href": "Workgroup1.html",
    "title": "Workgroup 1: Introduction to R and RStudio",
    "section": "",
    "text": "üß† Learning Objectives\nIn this session we will familiarize with the basics on the R computing language and the RStudio environment.\nBy the end of this lesson, you will be able to:",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "Workgroup1.html#what-is-r",
    "href": "Workgroup1.html#what-is-r",
    "title": "Workgroup 1: Introduction to R and RStudio",
    "section": "üõ†Ô∏è What is R?",
    "text": "üõ†Ô∏è What is R?\nR is a powerful, open-source programming language designed for statistical computing, data analysis and visualization. It is widely used among statisticians, data analysts, and researchers.\nIt was created by statisticians Ross Ihaka and Robert Gentleman in the early 1990s and has since become a standard tool in academia, research, and industry.\n\nKey Features of R\n\nStatistical Analysis: R allows to perform analysis using a wide range of statistical techniques including linear and nonlinear modeling, time-series analysis, classification, clustering, bayesian methods.\nData Visualization: R allows the creation of high-quality plots and graphics using specific packages (we will explain below what packages are) like ggplot2, lattice, and plotly.\nExtensibility: Thousands of community provided packages are available via CRAN (Comprehensive R Archive Network), covering several fields.\nData Handling: R includes robust tools for importing, cleaning, transforming, and manipulating data.\nCommunity Support: A large and active user community contributes to its development and provides extensive documentation and tutorials.\n\n\n\nInstalling R\nTo work with the programming language, the R interpreter needs to be installed. You can download it from the R homepage, which is:\n\nhttp://cran.r-project.org/\n\nThere are versions available for Windows, Mac and Linux (several distributions). Select the current version (version 4.5.1 at the start of this course) and install it in your personal computer if you want to use it at home.\nR installation includes a basic interface environment with a Console to enter commands and write scripts that can be launched using the R.exe or R.app.\n\nThis interface is nonetheless quite limited and it is not normally used for data analysis and script development. You can use this language through lots of different applications and environments (e.g.¬†VSCode, JupyterLabs, etc..) . For this course we will introduce the most commonly use development environment for R: RStudio.",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "Workgroup1.html#what-is-rstudio",
    "href": "Workgroup1.html#what-is-rstudio",
    "title": "Workgroup 1: Introduction to R and RStudio",
    "section": "üíª What is RStudio?",
    "text": "üíª What is RStudio?\nRStudio is an Integrated Development Environment (IDE) for R, that makes coding in R and management of data analysis projects easier.\nRStudio is a product developed by a company called posit, but that provides a free, open source RStudio Desktop version that can be downloaded here:\n\nhttps://posit.co/download/rstudio-desktop/\n\nAs with R, there are versions available for Windows, Mac and several Linux distributions.\nOnce we launch RStudio, you can distinguish four different areas:\n\nConsole: Where R code is executed, you can type commands and see their output.\nSource: Where you write and save scripts, Notebooks.\nEnvironments: Includes tabs to inspect variables and inspect the command history as well as access tutorials.\nFiles/Plots/Packages/Help/Viewer: Includes tabs for file navigation, plotting, package management, and help.\n\n\n\n\nRStudio Environment (extracted from RStudio User Guide)\n\n\nWe will familiarize with the interface during the exercises in the Workgroup sessions, but you can find a full description and information the following resources provided in the Posit website:\n\nRStudio IDE User Guide",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "Workgroup1.html#using-r-and-rstudio-on-the-web",
    "href": "Workgroup1.html#using-r-and-rstudio-on-the-web",
    "title": "Workgroup 1: Introduction to R and RStudio",
    "section": "üåêUsing R and RStudio on the web",
    "text": "üåêUsing R and RStudio on the web\nIf you don‚Äôt want to install in your own computer, you can use the Posit Cloud environment. that provides a Cloud Free option. This is the approach we will use in this course, so that you can access your work from anywhere.\nAll assignments will be performed in Posit Cloud where I can follow your progress and assist in case of issues.\n\n\nüìù Exercise1: Connect to Posit Cloud {#sec-üìù-exercise1}\nIn order to use Posit Cloud you need to register for this course following the link below.\nhttps://posit.cloud/spaces/681791/join?access_code=Da9RyPvqyx7Jymq_aHZpKYwBuJJ-45h5bjS1Y7tq\nYou will be directed to the following page. Select the sign-up option and create your account.\n\n\n\nPosit Cloud Sign-in page\n\n\nOnce you sign-in you should see the course project as in the image below:\n\n\n\n\n\nOpen it and explore the RStudio interface.",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "Workgroup1.html#additional-reading-material",
    "href": "Workgroup1.html#additional-reading-material",
    "title": "Workgroup 1: Introduction to R and RStudio",
    "section": "Additional Reading material",
    "text": "Additional Reading material\n\nExtended information on usage of dataframes and management with tidyverse and pipes\n\nhttps://datacarpentry.org/R-ecology-lesson/how-r-thinks-about-data.html\nhttps://datacarpentry.org/R-ecology-lesson/working-with-data.html",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "intro_to_r.html",
    "href": "intro_to_r.html",
    "title": "\n1¬† ‚úçÔ∏è R Syntax\n",
    "section": "",
    "text": "1.0.1 Commands and operators\nR is an interpreted language, which means that you can write commands to an interpreter in a console that will execute them and return the results. This is in comparison with compiled languages that require to compile the source code to translate it to a machine understandable code.\nIn the RStudio console, you can see the symbol below. This is the command prompt, indicating that the system us ready to execute an instruction or command.\nR syntax is relatively simple and, although daunting if you have never programmed before when you first encounter it, you will quickly get acquainted with it.\nHere‚Äôs a simple example of how R code looks. In the following sections we explain some basic concepts on the syntax and notation.\nBefore going forward, note that lines of code starting with the symbol # are not interpreted. This is use to introduce comments in your code for readability and documentation. We will come to that later when we talk about scripts and notebooks.\nEvery instruction to enter in the command prompt is called a command.\nA simple command is to perform an arithmetic operations like for example:\n1 + 2\n\n[1] 3\nThe command just calculated the addition of the two numbers. In this example, we used the operator + to do so.\nWe include a list below of the basic operators in R, grouped by category:s. Do not worry if not all are understandable yet:\n1. Arithmetic Operators\nUsed for basic mathematical operations:\n2. Relational (Comparison) Operators\nUsed to compare values:\n3. Logical Operators\nUsed for logical operations (return TRUE/FALSE):\n4. Assignment Operators\nUsed to assign values to variables:\n5. Miscellaneous Operators",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>‚úçÔ∏è R Syntax</span>"
    ]
  },
  {
    "objectID": "intro_to_r.html#variables",
    "href": "intro_to_r.html#variables",
    "title": "\n1¬† ‚úçÔ∏è R Syntax\n",
    "section": "\n1.1 Variables",
    "text": "1.1 Variables\nA variable is a name that stores a value or data object. You can think of it as a labeled container that holds information you want to use or manipulate in your program.\nIn R, you assign values to variables mostly using the operator &lt;- .\n\nx &lt;- 5       # Assign 5 to variable x  \ny &lt;- 10      # Assign 10 to variable y  \nz &lt;- x + y   # Add x and y  \nprint(z)     # Print the result \n\n[1] 15\n\n\nVariables naming in R can be anything, but follow a few rules:\n\nMust start with a letter\nCan contain letters, numbers, underscores (_) or periods (.)\nAre case-sensitive (Name and name are different)",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>‚úçÔ∏è R Syntax</span>"
    ]
  },
  {
    "objectID": "intro_to_r.html#data-types",
    "href": "intro_to_r.html#data-types",
    "title": "\n1¬† ‚úçÔ∏è R Syntax\n",
    "section": "\n1.2 Data types",
    "text": "1.2 Data types\n\n1.2.1 Basic types\nR supports several basic data types. Some of the most common are:\n\nNumeric: x &lt;- 3.14\nInteger: x &lt;- 5L (note the L)\nCharacter: name &lt;- \"Leticia\"\nLogical: flag &lt;- TRUE\n\n1.2.2 Vectors and lists\nVectors are the most basic data structure in R. They are a groups of values built using the combine function,¬†c(). For example,¬†c(1, 2, 3, 4)¬†creates a four element series of positive integer values\n\nnumbers &lt;- c(1, 2, 3, 4)\nnumbers\n\n[1] 1 2 3 4\n\n\nYou can also perform operations on vectors.\n\nnumbers^2\n\n[1]  1  4  9 16\n\n\n\n1.2.3 Dataframes\nstructures can be thought of as sets of data organized in a table format in rows and columns. They can be created using the dataframe() function.\n\ndf &lt;- data.frame(\n  SubjectID = c(\"S1\", \"S2\",\"S3\"),\n  age = c(25, 30, 28)\n)\ndf\n\n  SubjectID age\n1        S1  25\n2        S2  30\n3        S3  28\n\n\nYou can access the individual columns on a dataframe using the $ operator. Try to start typing the code below on the console. You will see that R provides suggested completions, displaying the available columns in the dataframe.\n\ndf$SubjectID\n\n[1] \"S1\" \"S2\" \"S3\"\n\n\nMany of the functions we will use in this course require a dataframe as an input or produce one as output, so it is the data structure you will use the most.",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>‚úçÔ∏è R Syntax</span>"
    ]
  },
  {
    "objectID": "intro_to_r.html#par-functions",
    "href": "intro_to_r.html#par-functions",
    "title": "\n1¬† ‚úçÔ∏è R Syntax\n",
    "section": "\n1.3 Functions",
    "text": "1.3 Functions\nFunctions perform tasks in R. They take in inputs called arguments and return outputs. They are called using parentheses. For example, the function mean() in R calculates the mean of the elements we provide as input.\n\n# We can specify a list of numbers\nmean(c(1,2,3,4))\n\n[1] 2.5\n\n\nOr, more useful, we can provide a variable containing values:\n\n# we defined the variable numbers before\nmean(numbers)\n\n[1] 2.5\n\n\nThe parameters of a function and normally called arguments. You can either manually specify a function‚Äôs arguments or use the function‚Äôs default values. In the examples above mean() and sum() are simple functions with not many arguments, but this is not normally the case.\nTo know the arguments of a function you can use the R help. There are two ways to access the help pages for a function:\n\n\nUse the operator ? followed by the function name in the console: If you type the instruction ?mean the help page for the mean() function will open in the RStudio Help panel as in the image below:\n\n\nYou can of course directly open the Help tab and search for the function of interest.\n\nAs you can see above, mean() actually has two other arguments, trim and na.rm . The arguments have a default value, so if we don‚Äôt explicitly include them in the function call, they will use that value. Let‚Äôs look at an example using na.rm :\nR has a special value called NA , which means ‚ÄúNot Available‚Äù and it is used to represent missing values on the data. In experimental work is often the case that some data point is lost or corrupted and we have incomplete datasets. Let‚Äôs assume you had performed an online experiment that computed the reaction time in miliseconds of 10 participants, and one value was not available as per the vector below:\n\nrt &lt;- c(234.2, 127.5, 256.2, NA, 287.1, 145.6, 358.9, 200.1, 398.3, 178.3)\n\nLet‚Äôs try to calculate the average reaction time of your data using mean():\n\nmean(rt)\n\n[1] NA\n\n\nThe function tries to calculate the average, but when one value is not available (NA) the result is also NA . In the help in the image below we see there is an argument na.rm that we can use to ignore the missing elements in the data:\n\nmean(rt, na.rm = TRUE)\n\n[1] 242.9111\n\n\nNow the function worked and summed all the numbers and divided them by 9, ignoring the missing data, in the calculation of the average.\nWe‚Äôll work with functions a lot throughout this book and you‚Äôll get lots of practice in understanding their behaviors, so don‚Äôt panic.\nFinally an advanced note to make you aware that you can define your own functions. The following code defines a new function called add() that, well, adds two numbers:\n\nadd &lt;- function(a, b) {\n  return(a + b)\n}\n\nOnce you have defined the function, you can use it as any other in R:\n\nadd(3.5, 2.5)\n\n[1] 6",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>‚úçÔ∏è R Syntax</span>"
    ]
  },
  {
    "objectID": "intro_to_r.html#factors",
    "href": "intro_to_r.html#factors",
    "title": "\n1¬† ‚úçÔ∏è R Syntax\n",
    "section": "\n1.4 Factors",
    "text": "1.4 Factors\nIn¬†R, a¬†factor¬†is a data structure used to represent¬†categorical data. Categorical data consists of variables that have a fixed number of unique values, known as¬†levels. These are typically used for any variable that classifies observations into groups. We will use factors extensively in the analysis of data\nWe convert a vector into a factor by using the factor() function. Let‚Äôs look at one example.\n\n\n1.4.1 üìù Exercise 2: Creating a dataframe with factors\nWe want to create a dataset of six words, collecting data of the animacy, gender, length and frequency of the word.\nFirst, we create individual variables with vectors including the values\n\nNounAnimacy&lt;-c(\"animate\",\"inanimate\",\"inanimate\",\"animate\",\"animate\",\"animate\") \nNounAnimacy \n\n[1] \"animate\"   \"inanimate\" \"inanimate\" \"animate\"   \"animate\"   \"animate\"  \n\n\n\nNounGender&lt;-c(\"feminine\",\"masculine\",\"neuter\",\"masculine\",\"feminine\",\"feminine\") \nNounGender\n\n[1] \"feminine\"  \"masculine\" \"neuter\"    \"masculine\" \"feminine\"  \"feminine\" \n\n\n\nNounLength&lt;-c(6,7,4,5,8,6) \nNounLength \n\n[1] 6 7 4 5 8 6\n\nNounFrequency&lt;-c(638,799,390,569,567,665) \nNounFrequency\n\n[1] 638 799 390 569 567 665\n\n\nAs you can see from the output above, data in the variables NounAnimacy and NounGender are considered as words, or literal strings. The next step is to indicate they are factors.\n\nNounAnimacy&lt;- factor(NounAnimacy) \nNounAnimacy \n\n[1] animate   inanimate inanimate animate   animate   animate  \nLevels: animate inanimate\n\nNounGender&lt;- factor(NounGender) \nNounGender\n\n[1] feminine  masculine neuter    masculine feminine  feminine \nLevels: feminine masculine neuter\n\n\nAs you can see by the output produced, now the variables are considered as factors, and Levels indicate the unique values that the each takes.\nWith the variables above, we can now create a dataframe.\n\nDataexample&lt;-data.frame(NounAnimacy,NounGender,NounLength,NounFrequency) \nDataexample\n\n  NounAnimacy NounGender NounLength NounFrequency\n1     animate   feminine          6           638\n2   inanimate  masculine          7           799\n3   inanimate     neuter          4           390\n4     animate  masculine          5           569\n5     animate   feminine          8           567\n6     animate   feminine          6           665\n\n\nIn this exercise, we have created a dataframe from scratch",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>‚úçÔ∏è R Syntax</span>"
    ]
  },
  {
    "objectID": "intro_to_r.html#additional-reading-material",
    "href": "intro_to_r.html#additional-reading-material",
    "title": "\n1¬† ‚úçÔ∏è R Syntax\n",
    "section": "\n1.5 Additional Reading material",
    "text": "1.5 Additional Reading material\nBasics on R programming:\n\nChapter 1, Introduction to R, from Bodo Winter‚Äôs book ((Winter 2019)).\nSections 2 to 8 on R basic Tutorial by UMC Utrecht\nA good starters reference for R is the book ‚ÄúR for Data Science‚Äù ((Wickham, √áetinkaya-Rundel, and Grolemund 2024)) ). The book is available online freely at R for Data Science\nExcellent eBook to learn R Basics ((Grolemund 2014)) Hands On Programming with R\n\nDataframes:\n\n\nYouTube Videos by DataCamp:\n\nhttps://www.youtube.com/watch?v=9f2g7RN5N0I\nhttps://youtu.be/Nh6tSD4i4qs?feature=shared\n\n\n\n\n\n\n\nGrolemund, Garrett. 2014. Hands-on Programming with r. \" O‚ÄôReilly Media, Inc.\".\n\n\nWickham, Hadley, Mine √áetinkaya-Rundel, and Garrett Grolemund. 2024. R for Data Science. O‚ÄôReilly.\n\n\nWinter, Bodo. 2019. Statistics for Linguists: An Introduction Using r. Routledge.",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>‚úçÔ∏è R Syntax</span>"
    ]
  },
  {
    "objectID": "using_libraries.html",
    "href": "using_libraries.html",
    "title": "2¬† üì¶ Libraries and Packages",
    "section": "",
    "text": "2.1 Installing and using a Package\nOne of the big benefits of R in comparison with other statistics packages is its open nature. The functionality is easily extended by groups all around the world by developing libraries that can be easily installed and used.\nR packages extend the functionality of R by providing additional functions, data, and documentation. They are written by a worldwide community of R users and can be downloaded for free from the internet.\nA package is a collection of R functions, data, and compiled code bundled together. Packages are created by the R community and cover a wide range of topics like data manipulation, visualization, machine learning, etc.\nPackages have to be installed and loaded before using them.\nWe need to install packages only once in our environment. That can be done in two ways:\nFor example, in several exercises in this book we use a library (created by for the book (Baayen 2008)) that contains some utilities and a few sample datasets with linguistics examples.\nLet‚Äôs install the library using the following command:\nAfter installing the package, the contents will still not be available until you load the package, this has to be done in every new work session and it is done with the library() function.\nNow you can access the functions and data in the languageR package.",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>üì¶ Libraries and Packages</span>"
    ]
  },
  {
    "objectID": "using_libraries.html#installing-and-using-a-package",
    "href": "using_libraries.html#installing-and-using-a-package",
    "title": "2¬† üì¶ Libraries and Packages",
    "section": "",
    "text": "Using the install.packages() function or\nUsing the Packages tab in RStudio:\n\n\n\n\ninstall.packages(\"languageR\")\n\n\n\n\n\n\nWarning\n\n\n\nThe installation of a package can give an error if you try to install a package that is already installed and loaded. If you get an error saying that you have already the package, just cancel.\n\n\n\nlibrary(languageR)",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>üì¶ Libraries and Packages</span>"
    ]
  },
  {
    "objectID": "using_libraries.html#using-datasets-available-in-packages",
    "href": "using_libraries.html#using-datasets-available-in-packages",
    "title": "2¬† üì¶ Libraries and Packages",
    "section": "2.2 Using datasets available in packages",
    "text": "2.2 Using datasets available in packages\n\nAs mentioned, the main objective of a package is to distribute functions, but it is often convenient to include example datasets that can be used to illustrate the use of the functions. In other cases, there are packages that are use mainly to distribute data. The later is the case for example for the languageR package, provided as a companion to the book Baayen (2008) that we will use in some of the examples and assignments in this course.\nYou can explore data sets available from all loaded packages using the data() function. If you want the data from a specific package, specified with the argument package .\nTake a look at the packages datasets included in languageR using the following command.\ndata(package=\"languageR\")\nYou will see that a new tab opens in the Editor area with the content:\n\nIf you want more information more information of a particular dataset, you can use the help operator ? as with any function.\nFor example in today‚Äôs assignment we will use the lexdec dataset containing Lexical decision latencies collected from a group of speakers. Run the following command to read the composition of the dataframe.\n?lexdec",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>üì¶ Libraries and Packages</span>"
    ]
  },
  {
    "objectID": "using_libraries.html#useful-packages",
    "href": "using_libraries.html#useful-packages",
    "title": "2¬† üì¶ Libraries and Packages",
    "section": "2.3 Useful packages",
    "text": "2.3 Useful packages\n\nThere are by now thousands of community contributed packages available for R and the list grows by the day (see complete list in CRAN website).\nIn practice you will use only a few packages on your data analysis tasks. I list below a number of commonly used packages for further reference (note we will only use a few of those in this course and I will always indicate it in the specific sessions or assignments).\n\n2.3.1 Packages for data input and output\n\n\n\nPackage\nUsage\nNotes\n\n\n\n\nforeign\nUsed to read data from other statistical analysis software as SPSS, Stata, etc\n\n\n\nreadxl\nRead Excel files\nPart of tidyverse\n\n\nreadr\nRead information in tabular format from CSV and TAB separated files\nPart of tidyverse\n\n\n\n\n\n2.3.2 Packages for data analysis\n\n\n\nPackage\nUsage\nNotes\n\n\n\n\nforeign\nUsed to read data from other statistical analysis software as SPSS, Stata, etc\n\n\n\nreadxl\n\n\n\n\n\n\n\n\n\n\n\n\n2.3.3 Packages for data visualization and manipulation\n\n\n\nPackage\nUsage\nNotes\n\n\n\n\nggplot2\nLibrary to create graphics and data visualizations\nPart of tidyverse\n\n\ndplyr\nData manipulation functions\nPart of tidyverse\n\n\ntidyr\nFunctions to transform data from wide to long format.\nPart of tidyverse\n\n\nforcats\nFunctions to modify factors levels and ordering\nPart of tidyverse\n\n\n\nWe will explore functions from the packages above in the Workgroups 1 & 2\n\n\n\n\nBaayen, R. H. 2008. Analyzing Linguistic Data: A Practical Introduction to Statistics Using r. Cambridge University Press.",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>üì¶ Libraries and Packages</span>"
    ]
  },
  {
    "objectID": "read_data.html",
    "href": "read_data.html",
    "title": "3¬† Reading and Saving data in R",
    "section": "",
    "text": "3.1 Reading data from files\nIn most of the cases, the\nWe cover below examples for importing data in R, covering the most common methods and packages.",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reading and Saving data in R</span>"
    ]
  },
  {
    "objectID": "read_data.html#sec-r-read",
    "href": "read_data.html#sec-r-read",
    "title": "3¬† Reading and Saving data in R",
    "section": "",
    "text": "3.1.1 Data from text files\nThe most generic function to read data from a text file is read.table() . The arguments allow to define if the data includes a header (i.e.¬†a first row with the names of the columns/variables) and the separator used\nNote that by default the argument is header = FALSE so you should explicitly change it to TRUE in case you have a first line in your file with the columns names.\nFor example, if we want to load a file called file.txt , TAB separated, we will use the function below.\ndata &lt;- read.table(\"file.txt\", header = TRUE, sep = \"\\t\")\n\n\n3.1.2 Data from CSV files\nMany experimental data is saved in a text or CSV (Comma separated) file. The best method to read data from these files is to use the readr package that is loaded as part of the tidyverse .\nlibrary(readr)\ndata &lt;- read_csv(\"yourfile.csv\")  # Load a CSV file  \nIf your data is tab-separated, you can use the function read_tsv() . By default, the functions expect that the first row contains the names of the columns/variables to be read. If that is not the case, you should modify the argument col_names = FALSE .\n\n\n3.1.3 Data from Excel files\nThe best way to read Excel files is using the readxl package. If your file has several worksheets, you can use the sheet argument to specify either an index or the name of the worksheet to read.\n# If not yet available, install the package\ninstall.packages(\"readxl\")\n\n# load library\nlibrary(readxl)\n\n# Using readxl\ndata &lt;- read_excel(\"file.xlsx\", sheet = 1)\n\n\n3.1.4 Data in R files\nData can also be saved and loaded in R format directly\n\n\n3.1.5 Data from SPSS\nThe haven package can be used to read directly .sav files from SPSS.\n# If not yet available, install the package\ninstall.packages(\"haven\")\n\n# Load library\nlibrary(haven)\n\n# Read the SPSS .sav file\ndata &lt;- read_sav(\"file.sav\")",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reading and Saving data in R</span>"
    ]
  },
  {
    "objectID": "read_data.html#save-to-r-format",
    "href": "read_data.html#save-to-r-format",
    "title": "3¬† Reading and Saving data in R",
    "section": "4.1 Save to R format",
    "text": "4.1 Save to R format",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reading and Saving data in R</span>"
    ]
  },
  {
    "objectID": "read_data.html#save-to-text",
    "href": "read_data.html#save-to-text",
    "title": "3¬† Reading and Saving data in R",
    "section": "4.2 Save to text",
    "text": "4.2 Save to text",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reading and Saving data in R</span>"
    ]
  },
  {
    "objectID": "tidyverse_intro.html",
    "href": "tidyverse_intro.html",
    "title": "4¬† Introduction to tidyverse",
    "section": "",
    "text": "4.1 üåê What is the tidyverse?\nThe tidyverse is a collection of R packages designed for data science. These packages share an underlying philosophy, grammar, and data structures, making it easier to learn and use them together. Tidyverse simplifies tasks like data manipulation, visualization, and modeling.",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Introduction to tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse_intro.html#core-tidyverse-packages",
    "href": "tidyverse_intro.html#core-tidyverse-packages",
    "title": "4¬† Introduction to tidyverse",
    "section": "4.2 üì¶ Core tidyverse Packages",
    "text": "4.2 üì¶ Core tidyverse Packages\nWhen you load the tidyverse, you get access to these core packages:\n\n\n\nPackage\nUsage\n\n\n\n\nggplot2\nData visualization\n\n\ndplyr\nData manipulation\n\n\ntidyr\nData tidying\n\n\nreadr\nReading rectangular data (CSV, etc.)\n\n\npurrr\nFunctional programming\n\n\ntibble\nModern data frames\n\n\nstringr\nString manipulation\n\n\nforcats\nWorking with categorical data (factors)",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Introduction to tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse_intro.html#workflow-using-tidyverse",
    "href": "tidyverse_intro.html#workflow-using-tidyverse",
    "title": "4¬† Introduction to tidyverse",
    "section": "4.3 Workflow Using tidyverse",
    "text": "4.3 Workflow Using tidyverse\n\n\n\n\n\nflowchart LR\n  load[\"Load tidyverse\"]\n  read[\"Read data\"]\n  clean[\"Clean and transform data\"]\n  plot[\"Visualize\"]\n  load --&gt; read\n  read --&gt; clean\n  clean --&gt; plot\n\n\n\n\n\n\n# Load tidyverse\n\nlibrary(tidyverse)\n\n# Read data\n\ndata &lt;- readcsv(\"data.csv\")\n\n# Clean and transform\n\ncleandata &lt;- data %&gt;%\n  filter(!is.na(value)) %&gt;%\n  mutate(newvalue = value * 2)\n\n# Visualize\n\nggplot(cleandata, aes(x = category, y = newvalue)) + geombar(stat = \"identity\")",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Introduction to tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse_intro.html#why-use-tidyverse",
    "href": "tidyverse_intro.html#why-use-tidyverse",
    "title": "4¬† Introduction to tidyverse",
    "section": "4.4 ‚úÖ Why Use tidyverse?",
    "text": "4.4 ‚úÖ Why Use tidyverse?\n\nConsistent and readable syntax\nPipe operator (%&gt;%) for chaining operations\nDesigned for tidy data principles\nStrong community and documentation",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Introduction to tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse_intro.html#pipe-operator-or",
    "href": "tidyverse_intro.html#pipe-operator-or",
    "title": "4¬† Introduction to tidyverse",
    "section": "4.5 Pipe operator (%>% or |> )",
    "text": "4.5 Pipe operator (%&gt;% or |&gt; )\nThe pipe operator allows you to¬†pass the result of one function directly into the next function¬†as its first argument. It‚Äôs widely used in the¬†tidyverse, especially with¬†dplyr.",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Introduction to tidyverse</span>"
    ]
  },
  {
    "objectID": "using_notebooks.html",
    "href": "using_notebooks.html",
    "title": "5¬† Reproducible research using Scripts and Notebooks",
    "section": "",
    "text": "5.1 R Scripts",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Reproducible research using Scripts and Notebooks</span>"
    ]
  },
  {
    "objectID": "using_notebooks.html#r-scripts",
    "href": "using_notebooks.html#r-scripts",
    "title": "5¬† Reproducible research using Scripts and Notebooks",
    "section": "",
    "text": "5.1.1 Saving scripts\n\n\n5.1.2 Executing scripts",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Reproducible research using Scripts and Notebooks</span>"
    ]
  },
  {
    "objectID": "using_notebooks.html#r-markdown-and-notebooks",
    "href": "using_notebooks.html#r-markdown-and-notebooks",
    "title": "5¬† Reproducible research using Scripts and Notebooks",
    "section": "5.2 R Markdown and Notebooks",
    "text": "5.2 R Markdown and Notebooks\n\n5.2.1 Basic syntax of R Markdown\n\n\n5.2.2 Notebooks\n\n\n\n\n\n\nCaution\n\n\n\nBeware that the environment of a Notebook is not the same as the R session environment!",
    "crumbs": [
      "Workgroup 1: Introduction to R and RStudio",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Reproducible research using Scripts and Notebooks</span>"
    ]
  },
  {
    "objectID": "Workgroup2.html",
    "href": "Workgroup2.html",
    "title": "Workgroup 2: Data Exploration with R",
    "section": "",
    "text": "üß† Learning Objectives\nBy the end of this lesson, you will be able to:\n\nExplore datasets.\nUse basic functions and create simple plots.\nData organization and transformation (sorting, filtering, merging)\nHistogram, Boxplot\nDescriptive statistics in R\nData summary write-up\n\n\n\n\n\n\n\nWorkgroup 2 material to be published in the coming weeks",
    "crumbs": [
      "Workgroup 2: Data Exploration with R"
    ]
  },
  {
    "objectID": "Workgroup3.html",
    "href": "Workgroup3.html",
    "title": "Workgroup 3: Simple Linear Regression with R",
    "section": "",
    "text": "Workgroup 3 material to be published in the coming weeks",
    "crumbs": [
      "Workgroup 3: Simple Linear Regression with R"
    ]
  },
  {
    "objectID": "Workgroup4.html",
    "href": "Workgroup4.html",
    "title": "Workgroup 4: Simple Linear Regression II",
    "section": "",
    "text": "Workgroup 4 material to be published in the coming weeks",
    "crumbs": [
      "Workgroup 4: Simple Linear Regression II"
    ]
  },
  {
    "objectID": "Workgroup5.html",
    "href": "Workgroup5.html",
    "title": "Workgroup 5: Multiple Regression with R",
    "section": "",
    "text": "Workgroup 5 material to be published in the coming weeks",
    "crumbs": [
      "Workgroup 5: Multiple Regression with R"
    ]
  },
  {
    "objectID": "Workgroup6.html",
    "href": "Workgroup6.html",
    "title": "Workgroup 6: Multiple Regression with R II",
    "section": "",
    "text": "Workgroup 6 material to be published in the coming weeks",
    "crumbs": [
      "Workgroup 6: Multiple Regression with R II"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Baayen, R. H. 2008. Analyzing Linguistic Data: A Practical\nIntroduction to Statistics Using r. Cambridge University Press.\n\n\nGrolemund, Garrett. 2014. Hands-on Programming with r. \"\nO‚ÄôReilly Media, Inc.\".\n\n\nKnuth, Donald E. 1984. ‚ÄúLiterate Programming.‚Äù Comput.\nJ. 27 (2): 97‚Äì111. https://doi.org/10.1093/comjnl/27.2.97.\n\n\nWickham, Hadley, Mine √áetinkaya-Rundel, and Garrett Grolemund. 2024.\nR for Data Science. O‚ÄôReilly.\n\n\nWinter, Bodo. 2019. Statistics for Linguists: An Introduction Using\nr. Routledge.",
    "crumbs": [
      "References"
    ]
  }
]