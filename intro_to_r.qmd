---
title: "Introduction to the R language"
author: "Dr. Leticia Pablos Robles"
---

# ✍️ R Syntax

## Commands and operators

R

```         
>
```

That's the ***command prompt***. When you see this, it means that R is waiting patiently for you to do something!

One of the easiest things you can do with R is use it as a simple calculator, so it's a good place to start. For instance, try typing `10 + 20`, and hitting enter.[^intro_to_r-1] When you do this, you've entered a ***command***, and R will "execute" that command. What you see on screen now will be this:

[^intro_to_r-1]: Seriously. If you're in a position to do so, open up R and start typing. The simple act of typing it rather than "just reading" makes a big difference. It makes the concepts more concrete, and it ties the abstract ideas (programming and statistics) to the actual context in which you need to use them. Statistics is something you *do*, not just something you read about in a textbook.

``` r
> 10 + 20
[1] 30
```

Not a lot of surprises in this extract. But there's a few things worth talking about, even with such a simple example. Firstly, it's important that you understand how to read the extract. In this example, what *I* typed was the `10 + 20` part. I didn't type the `>` symbol: that's just the R command prompt and isn't part of the actual command. And neither did I type the `[1] 30` part. That's what R printed out in response to my command.

Secondly, it's important to understand how the output is formatted. Obviously, the correct answer to the sum `10 + 20` is `30`, and not surprisingly R has printed that out as part of its response. But it's also printed out this `[1]` part, which probably doesn't make a lot of sense to you right now. You're going to see that a lot. I'll talk about what this means in a bit more detail later on, but for now you can think of `[1] 30` as if R were saying "the answer to the 1st question you asked is 30". That's not quite the truth, but it's close enough for now. And in any case it's not really very interesting at the moment: we only asked R to calculate one thing, so obviously there's only one answer printed on the screen. Later on this will change, and the `[1]` part will start to make a bit more sense. For now, I just don't want you to get confused or concerned by it.

## Variables

``` r
# This is a comment 
x <- 5       # Assign 5 to variable x 
y <- 10      # Assign 10 to variable y 
z <- x + y   # Add x and y 
print(z)     # Print the result 
```

## Functions

Functions perform tasks in R. They take in inputs called *arguments* and return outputs. You can either manually specify a function’s arguments or use the function’s *default values*.

-   For example, the function `seq()` in R generates a sequence of numbers. If you just run `seq()` it will return the value 1. That doesn’t seem very useful! This is because the default arguments are set as `seq(from = 1, to = 1)`. Thus, if you don’t pass in different values for `from` and `to` to change this behavior, R just assumes all you want is the number 1. You can change the argument values by updating the values after the `=` sign. If we try out `seq(from = 2, to = 5)` we get the result `2 3 4 5` that we might expect.

-   We’ll work with functions a lot throughout this book and you’ll get lots of practice in understanding their behaviors. To further assist you in understanding when a function is mentioned in the book, we’ll also include the `()` after them as we did with `seq()` above.

## Loops and conditional statements

## Data types

### Basic types

### Vectors and lists

Vectors are a groups of values built using the combine function, `c()`.

For example, `c(6, 11, 13, 31, 90, 92)` creates a six element series of positive integer values

### Dataframes and tibbles

Dataframes can be thought of as sets of data organized in a spreadsheet format in rows and columns.

# Working with Scripts

# Working with Notebooks

# 📝 Exercises

## 1. Basic Calculations

Open RStudio and type the following in the console:

-   Add 15 and 27

-   Multiply 6 by 9

-   Divide 100 by 4

## 2. Create Variables

``` r
a <- 12 
b <- 8 
c <- a * b 
print(c) 
```

Try changing the values of `a` and `b` and re-run the code.

## 3. Create a dataframe

Create a dataframe coming up with a sample data of your own (possibly made up) including 4 columns and 6 rows: one column with a factor with two levels, another column with a factor with 3 levels and two columns with numeric values.

You can create a dataframe in several ways, but below you see an example on the steps to create a dataframe based on on vectors.

Create individual variables with vectors including the values

```{r}
NounAnimacy<-c("animate","inanimate","inanimate","animate","animate","animate")
NounAnimacy

```

``` r
NounGender<-c("feminine","masculine","neuter","masculine","feminine","feminine")
NounGender
```

```{r}
NounGender<-c("feminine","masculine","neuter","masculine","feminine","feminine")
NounGender
```

```{r}
NounLength<-c(6,7,4,5,8,6)
NounLength
NounFrequency<-c(638,799,390,569,567,665)
NounFrequency
```

As you can see from the output above, data in the variables *NounAnimacy* and *NounGender* are considered as words, or literal strings. The next step is to indicate they are factors.

```{r}
NounAnimacy<-as.factor(NounAnimacy)
NounAnimacy
NounGender<-as.factor(NounGender)
NounGender
```

As you can see by the output produced, now the variables are considered as factors, and *Levels* indicate the unique values that the predictor takes.

With the variables above, we can now create a dataframe.

```{r}
Dataexample<-data.frame(NounAnimacy,NounGender,NounLength,NounFrequency)
Dataexample
```
