# Introduction to tidyverse {#sec-the-r-language}

## 🌐 **What is the tidyverse?**

The **`tidyverse`** is a collection of R packages designed for **data science**. These packages share an underlying philosophy, grammar, and data structures, making it easier to learn and use them together. Tidyverse simplifies tasks like data manipulation, visualization, and modeling.

## 📦 **Core tidyverse Packages**

When you load the tidyverse, you get access to these core packages:

| Package   | Usage                                   |
|-----------|-----------------------------------------|
| `ggplot2` | Data visualization                      |
| `dplyr`   | Data manipulation                       |
| `tidyr`   | Data tidying                            |
| `readr`   | Reading rectangular data (CSV, etc.)    |
| `purrr`   | Functional programming                  |
| `tibble`  | Modern data frames                      |
| `stringr` | String manipulation                     |
| `forcats` | Working with categorical data (factors) |

## **Workflow Using tidyverse**

```{mermaid}
flowchart LR
  load["Load tidyverse"]
  read["Read data"]
  clean["Clean and transform data"]
  plot["Visualize"]
  load --> read
  read --> clean
  clean --> plot
```

``` r
# Load tidyverse

library(tidyverse)

# Read data

data <- readcsv("data.csv")

# Clean and transform

cleandata <- data %>%
  filter(!is.na(value)) %>%
  mutate(newvalue = value * 2)

# Visualize

ggplot(cleandata, aes(x = category, y = newvalue)) + geombar(stat = "identity")
```

## ✅ **Why Use tidyverse?**

-   Consistent and readable syntax

-   Pipe operator (`%>%`) for chaining operations

-   Designed for tidy data principles

-   Strong community and documentation

## Pipe operator (`%>%` or `|>` )

The pipe operator allows you to **pass the result of one function directly into the next function** as its first argument. It’s widely used in the **tidyverse**, especially with `dplyr`.

## A grammar of data manipulation

dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges:

-   [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) adds new variables that are functions of existing variables

-   [`select()`](https://dplyr.tidyverse.org/reference/select.html) picks variables based on their names.

-   [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) picks cases based on their values.

-   [`summarise()`](https://dplyr.tidyverse.org/reference/summarise.html) reduces multiple values down to a single summary.

-   [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) changes the ordering of the rows.

Tibbles vs dataframes

You will see that the functions in `tidyverse` libraries return a so called `tibble` . The details are beyond the scope of this course, but you can think of a tibble as a simpler version of a dataframe. Let’s load another data frame and transform it into a tibble using `as_tibble()`:
