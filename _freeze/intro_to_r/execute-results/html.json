{
  "hash": "680bd54d3c195a532cc95f307cb87e06",
  "result": {
    "engine": "knitr",
    "markdown": "## ✍️ R Syntax\n\nR is an **interpreted language**, which means that you can write *commands* to an interpreter in a console that will execute them and return the results. This is in comparison with **compiled languages** that require to *compile* the source code to translate it to a machine understandable code.\n\nIn the RStudio console, you can see the symbol below. This is the **command prompt**, indicating that the system us ready to execute an instruction or command.\n\n```         \n>\n```\n\nR syntax is relatively simple and, although daunting if you have never programmed before when you first encounter it, you will quickly get acquainted with it.\n\nHere’s a simple example of how R code looks. In the following sections we explain some basic concepts on the syntax and notation.\n\n``` r\n# Load a package \nlibrary(tidyverse)  \n\n#Assign values to variables \nx <- c(1, 2, 3, 4, 5) \ny <- c(2, 4, 6, 8, 10)  \n\n# Create a scatter plot \nplot(x, y, main=\"Simple Scatter Plot\", xlab=\"X Axis\", ylab=\"Y Axis\")  \n\n# Fit a linear model \nmodel <- lm(y ~ x) abline(model, col=\"blue\")\n```\n\nBefore going forward, note that lines of code starting with the symbol `#` are not interpreted. This is use to introduce comments in your code for readability and documentation. We will come to that later when we talk about scripts and notebooks.\n\n::: callout-important\n**Note**: This course is not intended to be an in-depth R programming course. We will use the language to illustrate the concepts in the lectures and provide with simple examples so that you can perform basic data analysis.\n\nThere are plenty of online guided resources for further self-study of R and its capabilities. If you would like to go beyond the basics in the course or familiarize with the language, I would suggest two starting pages:\n\n-   UMC Utrecht's R tutorial: <http://r-tutorial.nl/>\n\n-   Book \"*R for Data Science\"*, available online at: <https://r4ds.hadley.nz/>\n:::\n\n### Commands and operators\n\nEvery instruction to enter in the ***command prompt*** is called a command.\n\nA simple command is to perform an arithmetic operations like for example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-tip\nCopy the code as you read along in this workbook and try it yourself in RStudio to become familiar with using the tool and environment.\n:::\n\nThe command just calculated the addition of the two numbers. In this example, we used the **operator** `+` to do so.\n\nWe include a list below of the **basic operators in R**, grouped by category:s. Do not worry if not all are understandable yet:\n\n**1. Arithmetic Operators**\n\nUsed for basic mathematical operations:\n\n| Operator    | Description         | Example         |\n|-------------|---------------------|-----------------|\n| `+`         | Addition            | `2 + 3`         |\n| `-`         | Subtraction         | `5 - 2`         |\n| `*`         | Multiplication      | `4 * 3`         |\n| `/`         | Division            | `10 / 2`        |\n| `^` or `**` | Exponentiation      | `2^3` or `2**3` |\n| `%%`        | Modulus (remainder) | `10 %% 3`       |\n\n**2. Relational (Comparison) Operators**\n\nUsed to compare values:\n\n| Operator | Description              | Example  |\n|----------|--------------------------|----------|\n| `==`     | Equal to                 | `x == y` |\n| `!=`     | Not equal to             | `x != y` |\n| `>`      | Greater than             | `x > y`  |\n| `<`      | Less than                | `x < y`  |\n| `>=`     | Greater than or equal to | `x >= y` |\n| `<=`     | Less than or equal to    | `x <= y` |\n\n**3. Logical Operators**\n\nUsed for logical operations (return `TRUE`/`FALSE`):\n\n| Operator | Description      | Example         |\n|----------|------------------|-----------------|\n| `&`      | Element-wise AND | `x > 1 & x < 5` |\n| `|`      | Element-wise OR  | `x < 1 | x > 5` |\n| `!`      | NOT              | `!TRUE`         |\n\n**4. Assignment Operators**\n\nUsed to assign values to variables:\n\n| Operator | Description | Example | **Comment** |\n|------------------|------------------|------------------|-------------------|\n| `<-` | Preferred assignment | `x <- 5` | Most commonly used |\n| `=` | Alternative assignment | `x = 5` | Used in the assignment of values to function arguments (see function section below) |\n| `->` | Assign right to left | `5 -> x` | Although syntactically valid in R, not used often |\n\n**5. Miscellaneous Operators**\n\n| Operator | Description     | Example                              |\n|----------|-----------------|--------------------------------------|\n| `%in%`   | Membership test | `3 %in% c(1, 2, 3)` will return TRUE |\n| `:`      | Sequence        | `1:5` returns `1 2 3 4 5`            |\n\n## Variables\n\nA **variable** is a name that stores a value or data object. You can think of it as a labeled container that holds information you want to use or manipulate in your program.\n\nIn R, you assign values to variables mostly using the operator `<-` .\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 5       # Assign 5 to variable x  \ny <- 10      # Assign 10 to variable y  \nz <- x + y   # Add x and y  \nprint(z)     # Print the result \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n:::\n\n\n\n\nVariables naming in R can be anything, but follow a few rules:\n\n-   Must start with a letter\n\n-   Can contain letters, numbers, underscores (`_`) or periods (`.`)\n\n-   Are case-sensitive (`Name` and `name` are different)\n\n## Data types\n\n### Basic types\n\nR supports several basic data types. Some of the most common are:\n\n-   **Numeric**: `x <- 3.14`\n\n-   **Integer**: `x <- 5L` (note the `L`)\n\n-   **Character**: `name <- \"Leticia\"`\n\n-   **Logical**: `flag <- TRUE`\n\n### Vectors and lists\n\nVectors are the most basic data structure in R. They are a groups of values built using the *combine* function, `c()`. For example, `c(1, 2, 3, 4)` creates a four element series of positive integer values\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers <- c(1, 2, 3, 4)\nnumbers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n\n\n\nYou can also perform operations on vectors.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  4  9 16\n```\n\n\n:::\n:::\n\n\n\n\n### Dataframes\n\nstructures can be thought of as sets of data organized in a table format in rows and columns. They can be created using the `dataframe()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  SubjectID = c(\"S1\", \"S2\",\"S3\"),\n  age = c(25, 30, 28)\n)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  SubjectID age\n1        S1  25\n2        S2  30\n3        S3  28\n```\n\n\n:::\n:::\n\n\n\n\nYou can access the individual columns on a dataframe using the `$` operator. Try to start typing the code below on the console. You will see that R provides suggested completions, displaying the available columns in the dataframe.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$SubjectID\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"S1\" \"S2\" \"S3\"\n```\n\n\n:::\n:::\n\n\n\n\nMany of the functions we will use in this course require a dataframe as an input or produce one as output, so it is the data structure you will use the most.\n\n## Functions {#par-functions}\n\nFunctions perform tasks in R. They take in inputs called *arguments* and return outputs. They are called using parentheses. For example, the function `mean()` in R calculates the mean of the elements we provide as input.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We can specify a list of numbers\nmean(c(1,2,3,4))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.5\n```\n\n\n:::\n:::\n\n\n\n\nOr, more useful, we can provide a variable containing values:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we defined the variable numbers before\nmean(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.5\n```\n\n\n:::\n:::\n\n\n\n\nThe parameters of a function and normally called *arguments.* You can either manually specify a function’s arguments or use the function’s *default values*. In the examples above `mean()` and `sum()` are simple functions with not many arguments, but this is not normally the case.\n\nTo know the arguments of a function you can use the R help. There are two ways to access the help pages for a function:\n\n1.  Use the operator `?` followed by the function name in the console: If you type the instruction `?mean` the help page for the `mean()` function will open in the RStudio Help panel as in the image below:\n\n    ![](images/clipboard-947968862.png)\n\n2.  You can of course directly open the Help tab and search for the function of interest.\n\nAs you can see above, `mean()` actually has two other arguments, `trim` and `na.rm` . The arguments have a default value, so if we don't explicitly include them in the function call, they will use that value. Let's look at an example using `na.rm` :\n\nR has a special value called `NA` , which means \"Not Available\" and it is used to represent missing values on the data. In experimental work is often the case that some data point is lost or corrupted and we have incomplete datasets. Let's assume you had performed an online experiment that computed the reaction time in miliseconds of 10 participants, and one value was not available as per the vector below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrt <- c(234.2, 127.5, 256.2, NA, 287.1, 145.6, 358.9, 200.1, 398.3, 178.3)\n```\n:::\n\n\n\n\nLet's try to calculate the average reaction time of your data using `mean()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(rt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n\n\nThe function tries to calculate the average, but when one value is not available (`NA`) the result is also `NA` . In the help in the image below we see there is an argument `na.rm` that we can use to ignore the missing elements in the data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(rt, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 242.9111\n```\n\n\n:::\n:::\n\n\n\n\nNow the function worked and summed all the numbers and divided them by 9, ignoring the missing data, in the calculation of the average.\n\nWe’ll work with functions a lot throughout this book and you’ll get lots of practice in understanding their behaviors, so don't panic.\n\nFinally an advanced note to make you aware that you can define your own functions. The following code defines a new function called `add()` that, well, adds two numbers:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd <- function(a, b) {\n  return(a + b)\n}\n```\n:::\n\n\n\n\nOnce you have defined the function, you can use it as any other in R:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd(3.5, 2.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n\n\n## Factors\n\nIn **R**, a **factor** is a data structure used to represent **categorical data**. Categorical data consists of variables that have a fixed number of unique values, known as **levels**. These are typically used for any variable that classifies observations into groups. We will use factors extensively in the analysis of data\n\nWe convert a vector into a factor by using the `factor()` function. Let's look at one example.\n\n------------------------------------------------------------------------\n\n### 📝 Exercise 2: Creating a dataframe with factors\n\nWe want to create a dataset of six words, collecting data of the *animacy*, *gender*, *length* and *frequency* of the word.\n\nFirst, we create individual variables with vectors including the values\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNounAnimacy<-c(\"animate\",\"inanimate\",\"inanimate\",\"animate\",\"animate\",\"animate\") \nNounAnimacy \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"animate\"   \"inanimate\" \"inanimate\" \"animate\"   \"animate\"   \"animate\"  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nNounGender<-c(\"feminine\",\"masculine\",\"neuter\",\"masculine\",\"feminine\",\"feminine\") \nNounGender\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"feminine\"  \"masculine\" \"neuter\"    \"masculine\" \"feminine\"  \"feminine\" \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nNounLength<-c(6,7,4,5,8,6) \nNounLength \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6 7 4 5 8 6\n```\n\n\n:::\n\n```{.r .cell-code}\nNounFrequency<-c(638,799,390,569,567,665) \nNounFrequency\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 638 799 390 569 567 665\n```\n\n\n:::\n:::\n\n\n\n\nAs you can see from the output above, data in the variables *NounAnimacy* and *NounGender* are considered as words, or literal strings. The next step is to indicate they are factors.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNounAnimacy<- factor(NounAnimacy) \nNounAnimacy \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] animate   inanimate inanimate animate   animate   animate  \nLevels: animate inanimate\n```\n\n\n:::\n\n```{.r .cell-code}\nNounGender<- factor(NounGender) \nNounGender\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] feminine  masculine neuter    masculine feminine  feminine \nLevels: feminine masculine neuter\n```\n\n\n:::\n:::\n\n\n\n\nAs you can see by the output produced, now the variables are considered as factors, and *Levels* indicate the unique values that the each takes.\n\nWith the variables above, we can now create a dataframe.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDataexample<-data.frame(NounAnimacy,NounGender,NounLength,NounFrequency) \nDataexample\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  NounAnimacy NounGender NounLength NounFrequency\n1     animate   feminine          6           638\n2   inanimate  masculine          7           799\n3   inanimate     neuter          4           390\n4     animate  masculine          5           569\n5     animate   feminine          8           567\n6     animate   feminine          6           665\n```\n\n\n:::\n:::\n\n\n\n\nIn this exercise, we have created a dataframe from scratch\n\n------------------------------------------------------------------------\n\n## Additional Reading material\n\n**Basics on R programming:**\n\n-   Chapter 1, Introduction to R, from Bodo Winter’s book ([@winter2019statistics]).\n\n-   Sections 2 to 8 on [R basic Tutorial by UMC Utrecht](http://r-tutorial.nl/)\n\n-   A good starters reference for R is the book “R for Data Science” ([@wickham2024r]) ). The book is available online freely at [R for Data Science](https://r4ds.hadley.nz/)\n\n-   Excellent eBook to learn R Basics ([@grolemund2014hands]) [Hands On Programming with R](https://rstudio-education.github.io/hopr/)\n\n**Dataframes:**\n\n-   YouTube Videos by DataCamp:\n\n    -   <https://www.youtube.com/watch?v=9f2g7RN5N0I>\n\n    -   <https://youtu.be/Nh6tSD4i4qs?feature=shared>\n",
    "supporting": [
      "intro_to_r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}