---
editor: visual
---

# Data organization and transformation {#sec-tidyverse2 .unnumbered}

As mentioned in the previous workgroup, it is not in the scope of the course to cover all the functions available in the `tidyverse` framework. We introduce a subset of them useful to illustrate the concepts in the course.

## Adding columns: `mutate()`

The `mutate()` function, part of the `dplyr` package, allows to create new columns or variables in a dataset. It is used normally for values based in an existing column.

As an example, let's use again the data from a psycholinguistic study on the reading comprehension of words as a function of frequency part of the English Lexicon Project, described in the the @winter2019statistics textbook Chapter 4.1. Dataset is in the file `/ELP_full_length_frequency.csv` in the `/data` directory.

We load the data as indicated in workgroup1

```{r}
library(readr)

dfELP <- read_csv("./data/ELP_full_length_frequency.csv",show_col_types = FALSE)
head(dfELP)
```

Let's say we want to add two new calculated values:

-   Reading time per character: calculated dividing RT by length

-   logarithmic Reading Time : calculated using the `log10()` function

We can add the two columns using `mutate()` as follows

```{r}
library(tidyverse)

dfELP_extended <- dfELP %>% mutate(RT_per_char = RT/length, logRT = log10(RT))
head(dfELP_extended)

```

::: callout-warning
To avoid filling up the memory in the system, we will remove the variables after completing the examples when not using them again for a while

```{r}
rm(dfELP, dfELP_extended)
```
:::

------------------------------------------------------------------------

## Data organization: long and wide format

A common task when preparing the analysis steps is to *reshape* the data in a way that can be used for the analysis.

We can widely characterize the data into two groups **wide** and **long**. (see section 3.9.4 of @field2026 for details)

![From A. Field](images/clipboard-127516850.png){width="660"}

The `tidyr` package contains two useful functions to allow to transform the data from one format to the other: `pivot_wider()` and `pivot_longer()` .

Again let's look at one example based on data from an Event Related Potential (ERP) experiment. In ERP analysis one common approach is to compare the average amplitude of the signal measured in several electrodes on a time window of interest for the ERP component expected. The file `EEG_DataSet_Wide.Rda` in the `/data` directory contains an example data set with the average voltage measured in a set of electrodes in a time window of 250-500ms to investigate the so-called N400 ERP component.

Let's load and look at the data:

```{r}
dfEEG_wide <- readRDS("./data/EEG_DataSet_Wide.Rda")
head(dfEEG_wide, n=8)
```

The table contains 64 columns, with one row representing the measurements on a particular condition per subject.

-   Column 1 - "Subject" - ID of the participant

-   Column 2 - "Condition" - factor representing the condition with four levels (CondA, CondB, CondC, CondD).

-   Columns 3-64: Average Voltages in 250-500 ms time window after stimuli onset at 61 electrodes.

For the data analysis, we would like to actually see the effect on the Voltage measurement at different electrode sites, so we would like to actually have the data organized as:

| Subject | Condition | Electrode | Amplitude |
|---------|-----------|-----------|-----------|
| 1       | CondA     | Fp1       | -3.047    |
| 1       | CondA     | Fpz       | -1.037    |
| ...     | ...       | ...       | ...       |

We can do this with the `pivot_longer()` function, that has the following syntax:

`pivot_longer(data, cols, names_to = "name", values_to = "value")`

-   `data` : dataframe to be transformed

-   `cols`: columns to be converted into longer format

-   `names_to`: name of the variable that will contain as values the names of the cols argument

-   `values_to`: name of the variable that will contain values

In our example, we want to pivot all columns with electrode name. Normally you could provide a list, but since here we have several columns we can specify a range: "from column Fp1 to CB2"

```{r}
dfEEG_long <- pivot_longer(dfEEG_wide,cols = Fp1:CB2, names_to = "Electrode",values_to= "AvgVoltage") 
head(dfEEG_long,n=8)
```

As can be seen from the output, we have the data in the format expected

Transforming into *wide format* is done similarly with the `pivot_wider()` function, that takes the following arguments:

-   `data` : dataframe to be transformed

-   `names_from` : column (or columns) to get the name of the output column

-   `values_from` : column (or columns) to get the cell values from

Let's imagine that we would like to transform our last dataframe into a table of the form:

| Subject | Electrode | CondA | CondB | CondC | CondD |
|---------|-----------|-------|-------|-------|-------|
| 1       | Fp1       |       |       |       |       |
| 1       | Fpz       |       |       |       |       |
| ...     | ...       |       |       |       |       |

We can do the following:

```{r}
dfEEG_wide_2 <- pivot_wider(dfEEG_long,names_from = "Condition",values_from= "AvgVoltage") 
head(dfEEG_wide_2,n=8)
```

::: callout-note
Pivoting tables can be confusing at first. You will master it with practice on your own data. This section is included to illustrate a typical data manipulation and provide tips for your own analysis but will not be used in exercises or exams.
:::

------------------------------------------------------------------------

## Further reading

If you want to go more into details here are links to good resources:

-   R for data Science ( @wickham2024r) [Chapter 5 - Data tyding](https://r4ds.hadley.nz/data-tidy.html)

-   Tidyverse [article on Pivoting](https://tidyr.tidyverse.org/articles/pivot.html)
